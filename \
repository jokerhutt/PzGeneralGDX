package jokerhut.main.utils;

import java.util.HashMap;

import com.badlogic.gdx.maps.MapProperties;
import com.badlogic.gdx.maps.tiled.TiledMap;
import com.badlogic.gdx.maps.tiled.TiledMapTile;
import com.badlogic.gdx.maps.tiled.TiledMapTileLayer;
import com.badlogic.gdx.maps.tiled.TiledMapTileSet;
import com.badlogic.gdx.utils.IntMap;

import jokerhut.main.DTs.Axial;
import jokerhut.main.DTs.Hex;
import jokerhut.main.DTs.TerrainProps;

public class TerrainUtils {

    public static int[][] generateTerrainWith2DCoordinates (TiledMap map) {

        TiledMapTileLayer layer = (TiledMapTileLayer) map.getLayers().get(0);

        int width = layer.getWidth();
        int height = layer.getHeight();

        int[][] terrain = new int[width][height];


for (int x = 0; x < width; x++) {
    for (int y = 0; y < height; y++) {
        TiledMapTileLayer.Cell cell = layer.getCell(x, y);
        if (cell != null) {
            terrain[x][y] = cell.getTile().getId();
        } else {
            terrain[x][y] = -1;
        }
    }
}

return terrain;

    }

public static HashMap<Axial, Hex> generateAxialMap (int[][] offsetGrid) {

    HashMap<Axial, Hex> axialMap = new HashMap<>();

    for (int col = 0; col < offsetGrid.length; col++) {
        for (int row = 0; row < offsetGrid[col].length; row++) {

            int tileId = offsetGrid[col][row];
            if (tileId == -1) continue;

            Axial axialCoordinates = HexUtils.offsetToAxial(col, row);
            axialMap.put(axialCoordinates, new Hex(axialCoordinates.q(), axialCoordinates.r()));

        }
    }

    return axialMap;


}

public static IntMap<TerrainProp> buildTileProps(TiledMap map) {
    IntMap<TerrainProps> out = new IntMap<>();
    for (TiledMapTileSet ts : map.getTileSets()) {
        for (TiledMapTile t : ts) {
            MapProperties p = t.getProperties();
            String terrStr = p.get("terrain", String.class);
            if (terrStr == null) continue;

            // tolerate "defence" vs "defense"
            Integer def = p.containsKey("defense") ? p.get("defense", Integer.class)
                                                  : p.get("defence", Integer.class, 0);
            int move = p.get("moveCost", Integer.class, 1);
            boolean pass = p.get("passable", Boolean.class, move < 99); // optional property

            // fix common typo
            if ("FORREST".equalsIgnoreCase(terrStr)) terrStr = "FOREST";

            Terrain terr = Terrain.valueOf(terrStr.toUpperCase());
            out.put(t.getId(), new TerrainProps(terr, def, move, pass));
        }
    }
    return out;
}


}
